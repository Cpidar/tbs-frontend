import { Cart, PaymentSession } from "@medusajs/medusa"
import { Button } from "@medusajs/ui"
import { useTranslation } from "react-i18next";

// const mellat = new MellatCheckout({
//     terminalId: 'xxxxxxx',
//     username: 'xxxxxxx',
//     password: 'xxxxxxx',
//     timeout: 10000, // Optional, number in millisecond (defaults to 10 sec)
//     apiUrl: 'https://bpm.shaparak.ir/pgwchannel/services/pgw?wsdl', // Optional, exists (and may updated) in bank documentation (defaults to this)
//   });
  
  // Initialize the client, this step is optional
  // but gives you more control over your flow
  // and speeds up the first (and just first) request.
  // mellat.initialize().then(function () {
  //   console.log("Mellat client ready")
  // })
  // .catch(function (error) {
  //   // you can retry here
  //   console.log("Mellat client encountered error:", error)
  // });

export const BehpardakhtPaymentButton = ({
    cart,
    notReady,
    'data-testid': dataTestId
  }: {
    cart: Omit<Cart, "refundable_amount" | "refunded_total">
    notReady: boolean
    'data-testid'?: string
  }) => {
    const { t } = useTranslation('common')
    
    const session = cart.payment_session as PaymentSession
    let refId = ''
    let submitting = false

    // mellat.paymentRequest({
    //     amount: cart.total, // Payment Amount In Rials
    //     orderId: session.cart_id, // OrderID Generated By You
    //     callbackUrl: 'https://call.back/mellat', // Payment Callback URL
    //     payerId: '0' // Optional
    //   }).then(function (response) {
    //     if (response.resCode === 0) {
    //       console.log(response.refId);
    //       refId = response.refId
    //       redirect('/')
    //       // Now redirect user to following address with post param
    //       // { RefId: response.refId }
    //       // https://bpm.shaparak.ir/pgwchannel/startpay.mellat
    //     } else {
    //       console.warn('Gateway Error: ', response.resCode);
    //     }
    //   }).catch(function (error) {
    //     console.error(error);
    //   });
    // const onPaymentCompleted = async () => {
    //   await placeOrder().catch((err) => {
    //     setErrorMessage(err.toString())
    //     setSubmitting(false)
    //   })
    // }
  
    const handlePayment = () => {
        submitting = true


    }
  
    return (
      <>
      <form action="https://bpm.shaparak.ir/pgwchannel/startpay.mellat">
      <input type="hidden" value={refId} id="RefId" name="RefId"/>

        <Button
          type="submit"
          disabled={notReady}
          isLoading={submitting}
          size="large"
          data-testid="submit-order-button"
        >
          {t('text-place-order')}
        </Button>
        {/* <ErrorMessage error={errorMessage} data-testid="manual-payment-error-message" /> */}
        </form>
      </>
    )
  }
  